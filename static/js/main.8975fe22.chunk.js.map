{"version":3,"sources":["TodoAppHead.js","App.js","serviceWorker.js","index.js"],"names":["TodoAppHead","props","handleChange","e","setState","inputText","target","value","addText","newtodo","text","state","isChecked","todo","concat","check","map","el","delete","filter","className","type","placeholder","this","name","onChange","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wPA2DeA,E,YAxDX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAQVC,aAAe,SAAAC,GACX,EAAKC,SAAS,CAAEC,UAAWF,EAAEG,OAAOC,SAVrB,EAYnBC,QAAU,WACN,IAAIC,EAAU,CACVC,KAAM,EAAKC,MAAMN,UACjBO,WAAW,GAEf,EAAKR,SAAS,CAAES,KAAM,EAAKF,MAAME,KAAKC,OAAOL,GAAUJ,UAAW,MAjBnD,EAmBnBU,MAAQ,SAACL,GACL,EAAKN,SAAS,CAAES,KAAM,EAAKF,MAAME,KAAKG,KAAI,SAAAC,GAAE,OAAIP,GAAQO,EAAGP,KAAX,eAAuBO,EAAvB,CAA2BL,WAAYK,EAAGL,YAAcK,QApBzF,EAsBnBC,OAAS,SAACR,GACN,EAAKN,SAAS,CAAES,KAAM,EAAKF,MAAME,KAAKM,QAAO,SAAAF,GAAE,OAAIP,IAASO,EAAGP,WArB/D,EAAKC,MAAQ,CACTN,UAAW,GACXK,KAAM,GACNE,WAAW,EACXC,KAAM,IANK,E,sEA0BT,IAAD,OACL,OACI,6BACI,yBAAKO,UAAU,eACX,wBAAIA,UAAU,SAAd,cACA,wBAAIA,UAAU,YAAd,iBACA,yBAAKA,UAAU,WACX,2BAAOC,KAAK,OAAOD,UAAU,WAAWE,YAAY,iBAAiBf,MAAOgB,KAAKZ,MAAMN,UAAWmB,KAAK,YAAYC,SAAUF,KAAKrB,eAClI,4BAAQkB,UAAU,UAAUM,QAASH,KAAKf,SAA1C,SAGR,yBAAKY,UAAU,UACX,yDACA,6BACKG,KAAKZ,MAAME,KAAKG,KAAI,SAAAC,GAAE,OACnB,yBAAKG,UAAU,WACX,6BACI,4BAAQA,UAAU,SAASM,QAAS,kBAAM,EAAKX,MAAME,EAAGP,QAAQO,EAAGL,UAAY,UAAY,SAC3F,4BAAQQ,UAAU,SAASM,QAAS,kBAAM,EAAKR,OAAOD,EAAGP,QAAzD,WAEJ,wBAAIU,UAAWH,EAAGL,UAAY,oBAAsB,WAAYK,EAAGP,iB,GA/CzEiB,a,MCUXC,MARf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,QCKcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8975fe22.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass TodoAppHead extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inputText: \"\",\r\n            text: \"\",\r\n            isChecked: false,\r\n            todo: []\r\n        }\r\n    }\r\n    handleChange = e => {\r\n        this.setState({ inputText: e.target.value })\r\n    }\r\n    addText = () => {\r\n        let newtodo = {\r\n            text: this.state.inputText,\r\n            isChecked: false,\r\n        }\r\n        this.setState({ todo: this.state.todo.concat(newtodo), inputText: \"\" })\r\n    }\r\n    check = (text) => {\r\n        this.setState({ todo: this.state.todo.map(el => text == el.text ? { ...el, isChecked: !el.isChecked } : el) })\r\n    }\r\n    delete = (text) => {\r\n        this.setState({ todo: this.state.todo.filter(el => text !== el.text) }\r\n        )\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\" headerTodo\">\r\n                    <h1 className=\"title\">To-Do App!</h1>\r\n                    <h6 className=\"subTitle\">Add new To-Do</h6>\r\n                    <div className=\"addTask\">\r\n                        <input type=\"text\" className=\"textTask\" placeholder=\"Enter new task\" value={this.state.inputText} name=\"inputText\" onChange={this.handleChange} />\r\n                        <button className=\"btnTask\" onClick={this.addText}>Add</button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"toText\">\r\n                    <h2>Let's get some work done!</h2>\r\n                    <div>\r\n                        {this.state.todo.map(el => (\r\n                            <div className=\"newToDo\">\r\n                                <div >\r\n                                    <button className=\"newBtn\" onClick={() => this.check(el.text)}>{el.isChecked ? 'Uncheck' : 'Check'}</button>\r\n                                    <button className=\"newBtn\" onClick={() => this.delete(el.text)}>Delete</button>\r\n                                </div>\r\n                                <h4 className={el.isChecked ? 'lineCheck newText' : 'newText'}>{el.text}</h4>\r\n                            </div>\r\n                        ))\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\nexport default TodoAppHead","import React from 'react';\nimport TodoAppHead from './TodoAppHead';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoAppHead />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}